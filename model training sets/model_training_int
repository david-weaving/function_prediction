
#model training for floats

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM
from tensorflow.keras.models import load_model
from tensorflow.keras.regularizers import l2
from math import sqrt
from data_for_training import x_train, y_train, x_val, y_val

# # Define the model
# model = Sequential()
# model.add(Dense(64, activation='relu', input_shape=(6,))) # Input shape is (4,) for your data
# model.add(Dense(32, activation='relu'))
# model.add(Dense(1))  # Output layer for predicting a single value

model = Sequential()
model.add(Dense(32, activation='relu', kernel_regularizer=l2(0.001), input_shape=(6,)))
model.add(Dense(16, activation='relu', kernel_regularizer=l2(0.001)))
model.add(Dense(1))
#model.compile(optimizer='adam', loss='mse')

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Determine the batch size
batch_size = 5

# Calculate steps per epoch
steps_per_epoch = len(x_train) // batch_size

# Train the model
model.fit(x_train.reshape((x_train.shape[0], x_train.shape[1], 1)), y_train,
          epochs=550, verbose=1, validation_data=(x_val.reshape((x_val.shape[0], x_val.shape[1], 1)), y_val),
          steps_per_epoch=steps_per_epoch)


model.save("function_prediction/models/model_int_v2_1.h5")

