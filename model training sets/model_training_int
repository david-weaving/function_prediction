import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.regularizers import l2

# Example data
x_train = np.array([[1,2,3,4,5,6],[2,3,4,5,6,7],[6,7,8,9,10,11],[7,8,9,10,11,12],[13,14,15,16,17,18],[23,24,25,26,27,28],[0,1,2,3,4,5],
                    [1,2,1,2,1,2],[2,1,2,1,2,1],[1,4,9,16,25,36],[4,9,16,25,36,49],[16,25,36,49,64,81],[36,37,38,39,40,41],[49,64,81,100,121,144],
                    [100,101,102,103,104,105],[1,4,9,16,25,36],[80,99,120,143,168,194],[81,100,121,144,169,196],[1,2,3,4,5,6],
                    [8,9,10,11,12,13],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[3,4,5,6,7,8],[1,2,3,4,5,6],
                    [1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6],[1,8,27,64,125,216],[8,27,64,125,216,343],
                    [64,125,216,343,512,729],[14,15,16,17,18,19],[17,18,19,20,21,22],[20,21,22,23,24,25]])
y_train = np.array([7,8,12,13,19,29,6,1,2,49,64,100,42,169,106,49,225,225,7,14,7,7,7,9,7,7,7,7,7,343,512,1000,20,23,26])

x_val = np.array([[5,6,7,8,9,10],[11,12,13,14,15,16],[21,22,23,24,25,26],[3,4,5,6,7,8],[1,2,3,4,5,6],[3,1,3,1,3,1],[9,16,25,36,49,64],
                  [39,40,41,42,43,44],[25,36,49,64,81,100],[108,109,110,111,112,113],[81, 101, 123, 147, 167, 197],[81,100,121,144,169,196],
                  [5,6,7,8,9,10],[11,12,13,14,15,16],[1,2,3,4,5,6],[27,64,125,216,343,512],[125,216,343,512,729,1000],[1,8,27,64,125,216],
                  [15,16,17,18,19,20]])
y_val = np.array([11,17,27,9,7,3,81,45,121,114,225,225,11,17,7,729,1331,343,21])


# Define the model
model = Sequential()
model.add(Dense(64, activation='relu', kernel_regularizer=l2(0.001), input_shape=(6,)))
model.add(Dense(32, activation='relu', kernel_regularizer=l2(0.001)))
#model.add(Dense(1))
model.add(Dense(1, activation='linear'))  # Ensure linear activation for integer output

# Compile the model
model.compile(optimizer='adam', loss='mse')

# Determine the batch size
batch_size = 5

# Calculate steps per epoch
steps_per_epoch = len(x_train) // batch_size

# Train the model
model.fit(x_train.reshape((x_train.shape[0], x_train.shape[1], 1)), y_train,
          epochs=500, verbose=1,
          validation_data=(x_val.reshape((x_val.shape[0], x_val.shape[1], 1)), y_val),
          steps_per_epoch=steps_per_epoch)

# Save the trained model
model.save("models/model_int_v2_4.h5")
